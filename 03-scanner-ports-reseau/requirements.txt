# Requirements pour le Scanner de Ports Réseau
# ========================================

# Modules Python standard utilisés:
# - socket : communication réseau et scan de ports
# - threading : programmation multi-threadée
# - concurrent.futures : ThreadPoolExecutor pour performances
# - time : gestion du temps et timing
# - argparse : interface ligne de commande
# - sys : fonctions système
# - json : export de données JSON
# - csv : export de données CSV
# - datetime : gestion dates et timestamps
# - ipaddress : manipulation d'adresses IP et réseaux CIDR
# - subprocess : exécution de commandes système (ping)
# - re : expressions régulières pour parsing des bannières
# - io : manipulation de chaînes en mémoire

# Ce projet utilise uniquement des modules de la bibliothèque standard Python,
# aucune dépendance externe n'est requise.

# Version Python recommandée: 3.8+
# (ipaddress et concurrent.futures sont disponibles depuis Python 3.3/3.2)

# Pour installer les dépendances (aucune dans ce cas):
# pip install -r requirements.txt

# Note: Si vous souhaitez ajouter des fonctionnalités avancées,
# voici quelques suggestions de bibliothèques:

# python-nmap>=0.7.1           # Interface Python pour Nmap (scan avancé)
# scapy>=2.4.5                 # Manipulation de paquets réseau
# colorama>=0.4.0              # Coloration de sortie console
# rich>=13.0.0                 # Interface console avancée avec tableaux
# click>=8.1.0                 # Interface CLI alternative à argparse
# requests>=2.31.0             # Pour identification de services web
# asyncio                      # Programmation asynchrone (module standard 3.4+)

# Pour des scans plus avancés:
# masscan                      # Scanner très rapide (outil externe)
# zmap                         # Scanner de réseau à grande échelle (outil externe)

# Sécurité et permissions:
# Certains types de scans peuvent nécessiter des privilèges administrateur
# Respectez les lois locales et n'utilisez que sur vos propres systèmes
# ou avec autorisation explicite