import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './ExploitationModule.css';

// Backend URL - Auto-detect portable environment
const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';

// API client
const api = axios.create({
  baseURL: BACKEND_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  }
});

const ExploitationModule = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [exploitsDatabase, setExploitsDatabase] = useState(null);
  const [activeSessions, setActiveSessions] = useState([]);
  const [statistics, setStatistics] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Load initial data
  useEffect(() => {
    loadExploitationData();
    const interval = setInterval(loadExploitationData, 10000); // Refresh every 10 seconds
    return () => clearInterval(interval);
  }, []);

  const loadExploitationData = async () => {
    try {
      const [infoResponse, databaseResponse, sessionsResponse] = await Promise.all([
        api.get('/api/exploitation/'),
        api.get('/api/exploitation/exploits/database'),
        api.get('/api/exploitation/sessions')
      ]);

      setStatistics(infoResponse.data.statistics);
      setExploitsDatabase(databaseResponse.data);
      setActiveSessions(sessionsResponse.data.sessions);
      setError(null);
    } catch (err) {
      console.error('Failed to load exploitation data:', err);
      setError(`Failed to load data: ${err.message}`);
    }
  };

  const tabs = [
    { id: 'overview', name: 'Overview', icon: 'üè†' },
    { id: 'exploits', name: 'Exploit Database', icon: 'üí•' },
    { id: 'payloads', name: 'Payload Generator', icon: 'üöÄ' },
    { id: 'sessions', name: 'Active Sessions', icon: 'üîó' },
    { id: 'post-exploitation', name: 'Post-Exploitation', icon: '‚öôÔ∏è' }
  ];

  return (
    <div className="exploitation-module">
      <div className="exploitation-header">
        <div className="header-title">
          <span className="header-icon">‚öîÔ∏è</span>
          <div>
            <h2>Exploitation Framework</h2>
            <p>Advanced penetration testing and exploitation toolkit</p>
          </div>
        </div>
        
        <div className="header-stats">
          {statistics && (
            <>
              <div className="stat-item">
                <span className="stat-value">{statistics.active_sessions}</span>
                <span className="stat-label">Active Sessions</span>
              </div>
              <div className="stat-item">
                <span className="stat-value">{statistics.total_exploits}</span>
                <span className="stat-label">Available Exploits</span>
              </div>
              <div className="stat-item">
                <span className="stat-value">{statistics.payload_templates}</span>
                <span className="stat-label">Payload Templates</span>
              </div>
            </>
          )}
        </div>
      </div>

      {error && (
        <div className="error-banner">
          <span className="error-icon">‚ö†Ô∏è</span>
          <span>{error}</span>
          <button onClick={loadExploitationData} className="retry-btn">
            üîÑ Retry
          </button>
        </div>
      )}

      <div className="exploitation-tabs">
        {tabs.map(tab => (
          <button
            key={tab.id}
            className={`tab ${activeTab === tab.id ? 'active' : ''}`}
            onClick={() => setActiveTab(tab.id)}
          >
            <span className="tab-icon">{tab.icon}</span>
            <span className="tab-name">{tab.name}</span>
          </button>
        ))}
      </div>

      <div className="tab-content">
        {activeTab === 'overview' && (
          <OverviewTab statistics={statistics} activeSessions={activeSessions} />
        )}
        {activeTab === 'exploits' && (
          <ExploitsTab exploitsDatabase={exploitsDatabase} />
        )}
        {activeTab === 'payloads' && (
          <PayloadsTab />
        )}
        {activeTab === 'sessions' && (
          <SessionsTab activeSessions={activeSessions} onRefresh={loadExploitationData} />
        )}
        {activeTab === 'post-exploitation' && (
          <PostExploitationTab activeSessions={activeSessions} />
        )}
      </div>
    </div>
  );
};

// Overview Tab Component
const OverviewTab = ({ statistics, activeSessions }) => {
  return (
    <div className="overview-tab">
      <div className="overview-grid">
        <div className="overview-card">
          <div className="card-header">
            <span className="card-icon">üìä</span>
            <h3>Framework Statistics</h3>
          </div>
          <div className="card-content">
            {statistics ? (
              <div className="stats-list">
                <div className="stat-row">
                  <span className="stat-name">Active Sessions:</span>
                  <span className="stat-value">{statistics.active_sessions}</span>
                </div>
                <div className="stat-row">
                  <span className="stat-name">Total Exploits:</span>
                  <span className="stat-value">{statistics.total_exploits}</span>
                </div>
                <div className="stat-row">
                  <span className="stat-name">Payload Templates:</span>
                  <span className="stat-value">{statistics.payload_templates}</span>
                </div>
                <div className="stat-row">
                  <span className="stat-name">Session Types:</span>
                  <span className="stat-value">{statistics.session_types?.join(', ') || 'None'}</span>
                </div>
              </div>
            ) : (
              <div className="loading">Loading statistics...</div>
            )}
          </div>
        </div>

        <div className="overview-card">
          <div className="card-header">
            <span className="card-icon">üéØ</span>
            <h3>Recent Activity</h3>
          </div>
          <div className="card-content">
            {statistics?.recent_activity?.length > 0 ? (
              <div className="activity-list">
                {statistics.recent_activity.map((activity, index) => (
                  <div key={index} className="activity-item">
                    <div className="activity-target">{activity.target}</div>
                    <div className="activity-command">{activity.last_command}</div>
                    <div className="activity-time">{new Date(activity.timestamp).toLocaleString()}</div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="no-data">No recent activity</div>
            )}
          </div>
        </div>

        <div className="overview-card">
          <div className="card-header">
            <span className="card-icon">üîó</span>
            <h3>Active Sessions</h3>
          </div>
          <div className="card-content">
            {activeSessions.length > 0 ? (
              <div className="sessions-preview">
                {activeSessions.slice(0, 3).map(session => (
                  <div key={session.id} className="session-preview">
                    <div className="session-target">{session.target}</div>
                    <div className="session-type">{session.type}</div>
                    <div className="session-status">{session.status}</div>
                  </div>
                ))}
                {activeSessions.length > 3 && (
                  <div className="more-sessions">+{activeSessions.length - 3} more</div>
                )}
              </div>
            ) : (
              <div className="no-data">No active sessions</div>
            )}
          </div>
        </div>

        <div className="overview-card">
          <div className="card-header">
            <span className="card-icon">üõ°Ô∏è</span>
            <h3>Stealth Status</h3>
          </div>
          <div className="card-content">
            <div className="stealth-status">
              <div className="stealth-item">
                <span className="stealth-label">Obfuscation:</span>
                <span className="stealth-value active">Enabled</span>
              </div>
              <div className="stealth-item">
                <span className="stealth-label">Proxy Rotation:</span>
                <span className="stealth-value active">Active</span>
              </div>
              <div className="stealth-item">
                <span className="stealth-label">Anti-Detection:</span>
                <span className="stealth-value active">Enabled</span>
              </div>
              <div className="stealth-item">
                <span className="stealth-label">Stealth Score:</span>
                <span className="stealth-value">95%</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Exploits Tab Component
const ExploitsTab = ({ exploitsDatabase }) => {
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedExploit, setSelectedExploit] = useState(null);
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    if (exploitsDatabase?.database?.categories) {
      const cats = Object.keys(exploitsDatabase.database.categories).map(categoryName => ({
        name: categoryName,
        exploits: Object.keys(exploitsDatabase.database.categories[categoryName]).map(exploitName => ({
          name: exploitName,
          data: exploitsDatabase.database.categories[categoryName][exploitName]
        }))
      }));
      setCategories(cats);
    }
  }, [exploitsDatabase]);

  const handleExploitSelection = (category, exploit) => {
    setSelectedCategory(category);
    setSelectedExploit(exploit);
  };

  return (
    <div className="exploits-tab">
      <div className="exploits-grid">
        <div className="exploits-sidebar">
          <div className="sidebar-header">
            <h3>üìö Exploit Categories</h3>
            {exploitsDatabase?.statistics && (
              <div className="category-stats">
                Total: {exploitsDatabase.statistics.total_exploits} exploits
              </div>
            )}
          </div>
          
          <div className="categories-list">
            {categories.map(category => (
              <div key={category.name} className="category-section">
                <div className="category-header">
                  <span className="category-icon">
                    {category.name === 'web' ? 'üåê' : 
                     category.name === 'network' ? 'üîå' : 
                     category.name === 'windows' ? 'ü™ü' : 
                     category.name === 'linux' ? 'üêß' : 'üìÅ'}
                  </span>
                  <span className="category-name">{category.name.toUpperCase()}</span>
                  <span className="exploit-count">({category.exploits.length})</span>
                </div>
                
                <div className="exploits-list">
                  {category.exploits.map(exploit => (
                    <div 
                      key={exploit.name}
                      className={`exploit-item ${selectedExploit?.name === exploit.name ? 'selected' : ''}`}
                      onClick={() => handleExploitSelection(category.name, exploit)}
                    >
                      <div className="exploit-name">{exploit.data.name || exploit.name}</div>
                      <div className={`exploit-severity ${exploit.data.severity || 'medium'}`}>
                        {exploit.data.severity || 'medium'}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="exploit-details">
          {selectedExploit ? (
            <ExploitDetails 
              category={selectedCategory} 
              exploit={selectedExploit} 
            />
          ) : (
            <div className="no-selection">
              <div className="no-selection-icon">üí•</div>
              <h3>Select an Exploit</h3>
              <p>Choose an exploit from the sidebar to view details and execution options</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Exploit Details Component
const ExploitDetails = ({ category, exploit }) => {
  const [executionConfig, setExecutionConfig] = useState({
    target: '',
    port: '80',
    path: '/',
    payload: ''
  });
  const [executing, setExecuting] = useState(false);
  const [executionResult, setExecutionResult] = useState(null);

  const handleExecuteExploit = async () => {
    if (!executionConfig.target) {
      alert('Please specify a target');
      return;
    }

    setExecuting(true);
    setExecutionResult(null);

    try {
      const response = await api.post('/api/exploitation/exploits/execute', {
        exploit_category: category,
        exploit_name: exploit.name,
        target: executionConfig.target,
        config: executionConfig
      });

      setExecutionResult(response.data.execution);
    } catch (error) {
      console.error('Exploit execution failed:', error);
      setExecutionResult({
        status: 'error',
        error: error.response?.data?.detail || error.message
      });
    } finally {
      setExecuting(false);
    }
  };

  return (
    <div className="exploit-details-content">
      <div className="exploit-header">
        <h2>{exploit.data.name || exploit.name}</h2>
        <div className={`severity-badge ${exploit.data.severity || 'medium'}`}>
          {(exploit.data.severity || 'medium').toUpperCase()}
        </div>
      </div>

      <div className="exploit-info">
        <div className="info-section">
          <h4>Description</h4>
          <p>{exploit.data.description || 'No description available'}</p>
        </div>

        <div className="info-section">
          <h4>Techniques</h4>
          <div className="techniques-list">
            {exploit.data.techniques?.map((technique, index) => (
              <span key={index} className="technique-tag">{technique}</span>
            )) || <span className="no-data">No techniques listed</span>}
          </div>
        </div>

        <div className="info-section">
          <h4>Available Payloads</h4>
          <div className="payloads-list">
            {exploit.data.payloads?.map((payload, index) => (
              <div key={index} className="payload-item">
                <code>{payload}</code>
              </div>
            )) || <span className="no-data">No payloads available</span>}
          </div>
        </div>
      </div>

      <div className="execution-section">
        <h4>üéØ Execute Exploit</h4>
        
        <div className="config-form">
          <div className="form-group">
            <label>Target *</label>
            <input
              type="text"
              value={executionConfig.target}
              onChange={(e) => setExecutionConfig(prev => ({...prev, target: e.target.value}))}
              placeholder="192.168.1.100 or example.com"
            />
          </div>

          {category === 'web' && (
            <>
              <div className="form-group">
                <label>Port</label>
                <input
                  type="text"
                  value={executionConfig.port}
                  onChange={(e) => setExecutionConfig(prev => ({...prev, port: e.target.value}))}
                  placeholder="80"
                />
              </div>
              <div className="form-group">
                <label>Path</label>
                <input
                  type="text"
                  value={executionConfig.path}
                  onChange={(e) => setExecutionConfig(prev => ({...prev, path: e.target.value}))}
                  placeholder="/vulnerable-endpoint"
                />
              </div>
            </>
          )}

          <div className="form-group">
            <label>Custom Payload (Optional)</label>
            <textarea
              value={executionConfig.payload}
              onChange={(e) => setExecutionConfig(prev => ({...prev, payload: e.target.value}))}
              placeholder="Custom payload or parameters"
              rows="3"
            />
          </div>

          <button 
            className="execute-btn"
            onClick={handleExecuteExploit}
            disabled={executing || !executionConfig.target}
          >
            {executing ? '‚è≥ Executing...' : 'üöÄ Execute Exploit'}
          </button>
        </div>

        {executionResult && (
          <div className="execution-result">
            <h4>üìã Execution Result</h4>
            <div className={`result-content ${executionResult.status}`}>
              <pre>{JSON.stringify(executionResult, null, 2)}</pre>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Payloads Tab Component
const PayloadsTab = () => {
  const [payloadConfig, setPayloadConfig] = useState({
    type: 'reverse_shell',
    subtype: 'bash',
    host: '127.0.0.1',
    port: '4444'
  });
  const [generatedPayload, setGeneratedPayload] = useState(null);
  const [generating, setGenerating] = useState(false);
  const [templates, setTemplates] = useState(null);

  useEffect(() => {
    loadPayloadTemplates();
  }, []);

  const loadPayloadTemplates = async () => {
    try {
      const response = await api.get('/api/exploitation/payloads/templates');
      setTemplates(response.data);
    } catch (error) {
      console.error('Failed to load payload templates:', error);
    }
  };

  const handleGeneratePayload = async () => {
    setGenerating(true);
    setGeneratedPayload(null);

    try {
      const response = await api.post('/api/exploitation/payloads/generate', {
        payload_type: payloadConfig.type,
        payload_subtype: payloadConfig.subtype,
        config: {
          host: payloadConfig.host,
          port: parseInt(payloadConfig.port)
        },
        obfuscate: true
      });

      setGeneratedPayload(response.data.payload);
    } catch (error) {
      console.error('Payload generation failed:', error);
      setGeneratedPayload({
        error: error.response?.data?.detail || error.message
      });
    } finally {
      setGenerating(false);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text).then(() => {
      alert('Payload copied to clipboard!');
    });
  };

  return (
    <div className="payloads-tab">
      <div className="payloads-grid">
        <div className="payload-generator">
          <div className="generator-header">
            <h3>üöÄ Payload Generator</h3>
            <p>Generate custom payloads for various platforms and scenarios</p>
          </div>

          <div className="generator-form">
            <div className="form-row">
              <div className="form-group">
                <label>Payload Type</label>
                <select
                  value={payloadConfig.type}
                  onChange={(e) => setPayloadConfig(prev => ({...prev, type: e.target.value}))}
                >
                  <option value="reverse_shell">Reverse Shell</option>
                  <option value="bind_shell">Bind Shell</option>
                  <option value="web_shell">Web Shell</option>
                  <option value="meterpreter">Meterpreter</option>
                </select>
              </div>

              <div className="form-group">
                <label>Platform/Language</label>
                <select
                  value={payloadConfig.subtype}
                  onChange={(e) => setPayloadConfig(prev => ({...prev, subtype: e.target.value}))}
                >
                  <option value="bash">Bash</option>
                  <option value="python">Python</option>
                  <option value="powershell">PowerShell</option>
                  <option value="php">PHP</option>
                  <option value="nc">Netcat</option>
                </select>
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>Host/IP Address</label>
                <input
                  type="text"
                  value={payloadConfig.host}
                  onChange={(e) => setPayloadConfig(prev => ({...prev, host: e.target.value}))}
                  placeholder="Your IP address"
                />
              </div>

              <div className="form-group">
                <label>Port</label>
                <input
                  type="text"
                  value={payloadConfig.port}
                  onChange={(e) => setPayloadConfig(prev => ({...prev, port: e.target.value}))}
                  placeholder="4444"
                />
              </div>
            </div>

            <button 
              className="generate-btn"
              onClick={handleGeneratePayload}
              disabled={generating}
            >
              {generating ? '‚è≥ Generating...' : 'üöÄ Generate Payload'}
            </button>
          </div>

          {generatedPayload && (
            <div className="generated-payload">
              <div className="payload-header">
                <h4>üìã Generated Payload</h4>
                <button 
                  className="copy-btn"
                  onClick={() => copyToClipboard(generatedPayload.content)}
                >
                  üìã Copy
                </button>
              </div>

              {generatedPayload.error ? (
                <div className="payload-error">
                  <strong>Error:</strong> {generatedPayload.error}
                </div>
              ) : (
                <div className="payload-content">
                  <div className="payload-info">
                    <div className="info-item">
                      <span>ID:</span> {generatedPayload.id}
                    </div>
                    <div className="info-item">
                      <span>Type:</span> {generatedPayload.type}/{generatedPayload.subtype}
                    </div>
                    <div className="info-item">
                      <span>Size:</span> {generatedPayload.size} bytes
                    </div>
                    <div className="info-item">
                      <span>Obfuscated:</span> {generatedPayload.obfuscated ? 'Yes' : 'No'}
                    </div>
                  </div>
                  
                  <div className="payload-code">
                    <pre><code>{generatedPayload.content}</code></pre>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        <div className="payload-templates">
          <div className="templates-header">
            <h3>üìö Available Templates</h3>
          </div>

          {templates ? (
            <div className="templates-list">
              {Object.keys(templates.templates).map(templateType => (
                <div key={templateType} className="template-category">
                  <div className="template-header">
                    <span className="template-icon">
                      {templateType === 'reverse_shell' ? 'üîÑ' : 
                       templateType === 'bind_shell' ? 'üîó' : 
                       templateType === 'web_shell' ? 'üåê' : 
                       templateType === 'meterpreter' ? 'üíÄ' : 'üìÅ'}
                    </span>
                    <span className="template-name">{templateType.replace('_', ' ').toUpperCase()}</span>
                  </div>
                  
                  <div className="template-description">
                    {templates.templates[templateType].description}
                  </div>
                  
                  <div className="template-subtypes">
                    <strong>Supported platforms:</strong>
                    <div className="subtypes-list">
                      {templates.templates[templateType].subtypes.map(subtype => (
                        <span key={subtype} className="subtype-tag">{subtype}</span>
                      ))}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="loading">Loading templates...</div>
          )}
        </div>
      </div>
    </div>
  );
};

// Sessions Tab Component
const SessionsTab = ({ activeSessions, onRefresh }) => {
  const [selectedSession, setSelectedSession] = useState(null);
  const [commandInput, setCommandInput] = useState('');
  const [executingCommand, setExecutingCommand] = useState(false);

  const handleSessionSelect = (session) => {
    setSelectedSession(session);
  };

  const handleExecuteCommand = async () => {
    if (!selectedSession || !commandInput.trim()) return;

    setExecutingCommand(true);

    try {
      const response = await api.post(`/api/exploitation/sessions/${selectedSession.id}/execute`, {
        command: commandInput.trim()
      });

      console.log('Command executed:', response.data);
      
      // Refresh session data
      onRefresh();
      setCommandInput('');
    } catch (error) {
      console.error('Command execution failed:', error);
      alert(`Command failed: ${error.response?.data?.detail || error.message}`);
    } finally {
      setExecutingCommand(false);
    }
  };

  const handleTerminateSession = async (sessionId) => {
    if (!confirm('Are you sure you want to terminate this session?')) return;

    try {
      await api.delete(`/api/exploitation/sessions/${sessionId}`);
      onRefresh();
      if (selectedSession?.id === sessionId) {
        setSelectedSession(null);
      }
    } catch (error) {
      console.error('Session termination failed:', error);
      alert(`Failed to terminate session: ${error.response?.data?.detail || error.message}`);
    }
  };

  return (
    <div className="sessions-tab">
      <div className="sessions-grid">
        <div className="sessions-list">
          <div className="sessions-header">
            <h3>üîó Active Sessions ({activeSessions.length})</h3>
            <button className="refresh-btn" onClick={onRefresh}>
              üîÑ Refresh
            </button>
          </div>

          {activeSessions.length > 0 ? (
            <div className="sessions-items">
              {activeSessions.map(session => (
                <div 
                  key={session.id}
                  className={`session-item ${selectedSession?.id === session.id ? 'selected' : ''}`}
                  onClick={() => handleSessionSelect(session)}
                >
                  <div className="session-header">
                    <div className="session-target">{session.target}</div>
                    <div className={`session-status ${session.status}`}>
                      {session.status}
                    </div>
                  </div>
                  
                  <div className="session-details">
                    <div className="session-type">{session.type}</div>
                    <div className="session-time">
                      Created: {new Date(session.created_at).toLocaleString()}
                    </div>
                    <div className="session-activity">
                      Commands: {session.commands_count}
                    </div>
                  </div>

                  <div className="session-actions">
                    <button 
                      className="terminate-btn"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleTerminateSession(session.id);
                      }}
                    >
                      ‚ùå Terminate
                    </button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="no-sessions">
              <div className="no-sessions-icon">üîó</div>
              <h4>No Active Sessions</h4>
              <p>No exploitation sessions are currently active</p>
            </div>
          )}
        </div>

        <div className="session-console">
          {selectedSession ? (
            <div className="console-content">
              <div className="console-header">
                <h4>üìü Session Console</h4>
                <div className="session-info">
                  <span>Target: {selectedSession.target}</span>
                  <span>Type: {selectedSession.type}</span>
                  <span>Status: {selectedSession.status}</span>
                </div>
              </div>

              <div className="command-interface">
                <div className="command-input-group">
                  <input
                    type="text"
                    value={commandInput}
                    onChange={(e) => setCommandInput(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleExecuteCommand()}
                    placeholder="Enter command to execute..."
                    disabled={executingCommand}
                  />
                  <button 
                    onClick={handleExecuteCommand}
                    disabled={executingCommand || !commandInput.trim()}
                    className="execute-command-btn"
                  >
                    {executingCommand ? '‚è≥' : '‚ñ∂Ô∏è'} Execute
                  </button>
                </div>
              </div>

              <div className="session-stats">
                <div className="stat-item">
                  <span>Commands Executed:</span>
                  <span>{selectedSession.commands_count}</span>
                </div>
                <div className="stat-item">
                  <span>Files Uploaded:</span>
                  <span>{selectedSession.files_uploaded}</span>
                </div>
                <div className="stat-item">
                  <span>Files Downloaded:</span>
                  <span>{selectedSession.files_downloaded}</span>
                </div>
                <div className="stat-item">
                  <span>Last Activity:</span>
                  <span>{new Date(selectedSession.last_activity).toLocaleString()}</span>
                </div>
              </div>
            </div>
          ) : (
            <div className="no-session-selected">
              <div className="no-selection-icon">üìü</div>
              <h4>Select a Session</h4>
              <p>Choose a session from the list to interact with it</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Post-Exploitation Tab Component
const PostExploitationTab = ({ activeSessions }) => {
  return (
    <div className="post-exploitation-tab">
      <div className="post-exploitation-content">
        <div className="coming-soon">
          <div className="coming-soon-icon">‚öôÔ∏è</div>
          <h3>Post-Exploitation Module</h3>
          <p>Advanced post-exploitation capabilities coming soon</p>
          
          <div className="planned-features">
            <h4>Planned Features:</h4>
            <ul>
              <li>üîß System enumeration and information gathering</li>
              <li>üìÅ File system exploration and manipulation</li>
              <li>üîë Privilege escalation techniques</li>
              <li>üåê Network pivoting and lateral movement</li>
              <li>üíæ Data exfiltration capabilities</li>
              <li>üè† Persistence mechanisms</li>
              <li>üßπ Anti-forensics and cleanup tools</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExploitationModule;