import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import './VulnerabilityScanner.css';

// Backend URL configuration
const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';

const api = axios.create({
  baseURL: BACKEND_URL,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  }
});

const VulnerabilityScanner = () => {
  const [activeTab, setActiveTab] = useState('scanner');
  const [scanTarget, setScanTarget] = useState('');
  const [scanType, setScanType] = useState('comprehensive');
  const [isScanning, setIsScanning] = useState(false);
  const [activeScans, setActiveScans] = useState([]);
  const [scanHistory, setScanHistory] = useState([]);
  const [selectedScan, setSelectedScan] = useState(null);
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [cveSearch, setCveSearch] = useState({
    service_name: '',
    version: '',
    severity_filter: ''
  });
  const [cveResults, setCveResults] = useState([]);
  const [selectedCve, setSelectedCve] = useState(null);
  const [databaseStats, setDatabaseStats] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [updateStatus, setUpdateStatus] = useState(null);

  // Auto-refresh active scans
  const intervalRef = useRef(null);

  useEffect(() => {
    fetchScanHistory();
    fetchDatabaseStats();
    
    // Start auto-refresh for active scans
    intervalRef.current = setInterval(() => {
      refreshActiveScans();
    }, 5000);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, []);

  useEffect(() => {
    if (selectedScan && selectedScan.status === 'completed') {
      fetchScanResults(selectedScan.scan_id);
    }
  }, [selectedScan]);

  // API Functions
  const fetchScanHistory = async () => {
    try {
      const response = await api.get('/api/vulnerability/scan/list');
      setScanHistory(response.data.scans || []);
    } catch (error) {
      console.error('Failed to fetch scan history:', error);
    }
  };

  const fetchDatabaseStats = async () => {
    try {
      const response = await api.get('/api/vulnerability/database/stats');
      setDatabaseStats(response.data);
    } catch (error) {
      console.error('Failed to fetch database stats:', error);
    }
  };

  const refreshActiveScans = async () => {
    if (activeScans.length > 0) {
      const updatedScans = [];
      for (const scan of activeScans) {
        try {
          const response = await api.get(`/api/vulnerability/scan/${scan.scan_id}/status`);
          updatedScans.push(response.data);
        } catch (error) {
          console.error(`Failed to refresh scan ${scan.scan_id}:`, error);
          updatedScans.push(scan); // Keep original if update fails
        }
      }
      setActiveScans(updatedScans.filter(scan => scan.status === 'running'));
    }
  };

  const startVulnerabilityScan = async () => {
    if (!scanTarget.trim()) {
      setError('Please enter a target to scan');
      return;
    }

    setIsScanning(true);
    setError(null);

    try {
      const response = await api.post('/api/vulnerability/scan/start', {
        target: scanTarget,
        scan_type: scanType,
        include_exploits: true,
        max_cves_per_service: 50
      });

      const scanInfo = {
        scan_id: response.data.scan_id,
        target: response.data.target,
        scan_type: response.data.scan_type,
        status: 'running',
        start_time: new Date().toISOString(),
        progress_percentage: 0
      };

      setActiveScans(prev => [...prev, scanInfo]);
      fetchScanHistory(); // Refresh history
      
      // Show success message
      setUpdateStatus(`✅ Vulnerability scan started for ${scanTarget}`);
      setTimeout(() => setUpdateStatus(null), 3000);

    } catch (error) {
      setError(error.response?.data?.detail || 'Failed to start vulnerability scan');
    } finally {
      setIsScanning(false);
    }
  };

  const fetchScanResults = async (scanId) => {
    setLoading(true);
    try {
      const response = await api.get(`/api/vulnerability/scan/${scanId}/results`);
      setVulnerabilities(response.data.vulnerabilities || []);
    } catch (error) {
      console.error('Failed to fetch scan results:', error);
      setError('Failed to fetch scan results');
    } finally {
      setLoading(false);
    }
  };

  const searchCveDatabase = async () => {
    if (!cveSearch.service_name.trim()) {
      setError('Please enter a service name to search');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await api.post('/api/vulnerability/cve/search', cveSearch);
      setCveResults(response.data.cves || []);
    } catch (error) {
      setError(error.response?.data?.detail || 'CVE search failed');
    } finally {
      setLoading(false);
    }
  };

  const getCveDetails = async (cveId) => {
    try {
      const response = await api.get(`/api/vulnerability/cve/${cveId}`);
      setSelectedCve(response.data);
    } catch (error) {
      console.error('Failed to get CVE details:', error);
    }
  };

  const updateCveDatabase = async () => {
    setLoading(true);
    setUpdateStatus('🔄 Starting CVE database update...');

    try {
      await api.post('/api/vulnerability/database/update', {
        days_back: 7,
        force_update: false
      });
      
      setUpdateStatus('✅ CVE database update started in background');
      
      // Refresh stats after a delay
      setTimeout(() => {
        fetchDatabaseStats();
        setUpdateStatus('✅ CVE database updated successfully');
      }, 5000);

    } catch (error) {
      setUpdateStatus('❌ Failed to update CVE database');
      setError(error.response?.data?.detail || 'Database update failed');
    } finally {
      setLoading(false);
    }
  };

  const deleteScan = async (scanId) => {
    if (!window.confirm('Are you sure you want to delete this scan?')) return;

    try {
      await api.delete(`/api/vulnerability/scan/${scanId}`);
      setScanHistory(prev => prev.filter(scan => scan.scan_id !== scanId));
      setActiveScans(prev => prev.filter(scan => scan.scan_id !== scanId));
      if (selectedScan && selectedScan.scan_id === scanId) {
        setSelectedScan(null);
        setVulnerabilities([]);
      }
    } catch (error) {
      setError('Failed to delete scan');
    }
  };

  // Helper functions
  const getSeverityClass = (severity) => {
    switch (severity?.toUpperCase()) {
      case 'CRITICAL': return 'severity-critical';
      case 'HIGH': return 'severity-high';
      case 'MEDIUM': return 'severity-medium';
      case 'LOW': return 'severity-low';
      default: return 'severity-unknown';
    }
  };

  const getRiskClass = (risk) => {
    switch (risk?.toUpperCase()) {
      case 'CRITICAL': return 'risk-critical';
      case 'HIGH': return 'risk-high';
      case 'MEDIUM': return 'risk-medium';
      case 'LOW': return 'risk-low';
      default: return 'risk-unknown';
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString();
  };

  const getProgressColor = (percentage) => {
    if (percentage >= 80) return '#4CAF50';
    if (percentage >= 60) return '#FF9800';
    return '#2196F3';
  };

  return (
    <div className="vulnerability-scanner">
      <div className="scanner-header">
        <h2>🔍 Vulnerability Scanner</h2>
        <div className="scanner-tabs">
          <button 
            className={`tab ${activeTab === 'scanner' ? 'active' : ''}`}
            onClick={() => setActiveTab('scanner')}
          >
            Scanner
          </button>
          <button 
            className={`tab ${activeTab === 'cve-search' ? 'active' : ''}`}
            onClick={() => setActiveTab('cve-search')}
          >
            CVE Search
          </button>
          <button 
            className={`tab ${activeTab === 'database' ? 'active' : ''}`}
            onClick={() => setActiveTab('database')}
          >
            Database
          </button>
        </div>
      </div>

      {error && (
        <div className="error-message">
          <span>❌ {error}</span>
          <button onClick={() => setError(null)} className="close-btn">×</button>
        </div>
      )}

      {updateStatus && (
        <div className="status-message">
          <span>{updateStatus}</span>
        </div>
      )}

      {/* Scanner Tab */}
      {activeTab === 'scanner' && (
        <div className="scanner-content">
          <div className="scanner-controls">
            <h3>🚀 Start Vulnerability Scan</h3>
            <div className="form-group">
              <label>Target (IP, Domain, or Network):</label>
              <input
                type="text"
                value={scanTarget}
                onChange={(e) => setScanTarget(e.target.value)}
                placeholder="e.g., 192.168.1.1, example.com, 192.168.1.0/24"
                disabled={isScanning}
              />
            </div>
            <div className="form-group">
              <label>Scan Type:</label>
              <select 
                value={scanType} 
                onChange={(e) => setScanType(e.target.value)}
                disabled={isScanning}
              >
                <option value="quick">Quick Scan</option>
                <option value="comprehensive">Comprehensive Scan</option>
                <option value="stealth">Stealth Scan</option>
                <option value="web">Web Application Scan</option>
                <option value="network">Network Services Scan</option>
              </select>
            </div>
            <button 
              onClick={startVulnerabilityScan}
              disabled={isScanning || !scanTarget.trim()}
              className="scan-btn"
            >
              {isScanning ? '🔄 Starting...' : '🚀 Start Scan'}
            </button>
          </div>

          {/* Active Scans */}
          {activeScans.length > 0 && (
            <div className="active-scans">
              <h3>⚡ Active Scans</h3>
              {activeScans.map((scan) => (
                <div key={scan.scan_id} className="active-scan-item">
                  <div className="scan-info">
                    <span className="scan-target">{scan.target}</span>
                    <span className="scan-type">{scan.scan_type}</span>
                    <span className="scan-status">{scan.status}</span>
                  </div>
                  <div className="progress-bar">
                    <div 
                      className="progress-fill"
                      style={{ 
                        width: `${scan.progress_percentage}%`,
                        backgroundColor: getProgressColor(scan.progress_percentage)
                      }}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Scan History */}
          <div className="scan-history">
            <h3>📊 Scan History</h3>
            <div className="history-table">
              <div className="table-header">
                <div>Target</div>
                <div>Type</div>
                <div>Status</div>
                <div>Vulnerabilities</div>
                <div>Date</div>
                <div>Actions</div>
              </div>
              {scanHistory.map((scan) => (
                <div key={scan.scan_id} className="table-row">
                  <div className="scan-target">{scan.target}</div>
                  <div>{scan.scan_type}</div>
                  <div className={`status status-${scan.status}`}>{scan.status}</div>
                  <div className="vulnerability-counts">
                    {scan.critical_count > 0 && <span className="critical">{scan.critical_count}C</span>}
                    {scan.high_count > 0 && <span className="high">{scan.high_count}H</span>}
                    {scan.medium_count > 0 && <span className="medium">{scan.medium_count}M</span>}
                    {scan.low_count > 0 && <span className="low">{scan.low_count}L</span>}
                    <span className="total">({scan.total_vulnerabilities})</span>
                  </div>
                  <div>{formatDate(scan.start_time)}</div>
                  <div className="actions">
                    {scan.status === 'completed' && (
                      <button 
                        onClick={() => setSelectedScan(scan)}
                        className="view-btn"
                      >
                        View
                      </button>
                    )}
                    <button 
                      onClick={() => deleteScan(scan.scan_id)}
                      className="delete-btn"
                    >
                      🗑️
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Scan Results */}
          {selectedScan && (
            <div className="scan-results">
              <div className="results-header">
                <h3>🎯 Scan Results: {selectedScan.target}</h3>
                <button 
                  onClick={() => setSelectedScan(null)}
                  className="close-results-btn"
                >
                  ×
                </button>
              </div>

              <div className="results-summary">
                <div className="summary-card critical">
                  <div className="count">{selectedScan.critical_count}</div>
                  <div className="label">Critical</div>
                </div>
                <div className="summary-card high">
                  <div className="count">{selectedScan.high_count}</div>
                  <div className="label">High</div>
                </div>
                <div className="summary-card medium">
                  <div className="count">{selectedScan.medium_count}</div>
                  <div className="label">Medium</div>
                </div>
                <div className="summary-card low">
                  <div className="count">{selectedScan.low_count}</div>
                  <div className="label">Low</div>
                </div>
              </div>

              {loading ? (
                <div className="loading">Loading vulnerabilities...</div>
              ) : (
                <div className="vulnerabilities-list">
                  {vulnerabilities.map((vuln, index) => (
                    <div key={index} className="vulnerability-item">
                      <div className="vuln-header">
                        <div className="service-info">
                          <span className="host">{vuln.target_host}:{vuln.target_port}</span>
                          <span className="service">{vuln.service_name} {vuln.service_version}</span>
                        </div>
                        <div className={`risk-level ${getRiskClass(vuln.risk_level)}`}>
                          {vuln.risk_level}
                        </div>
                      </div>
                      
                      <div className="cves-list">
                        {vuln.cves.map((cve, cveIndex) => (
                          <div key={cveIndex} className="cve-item">
                            <div className="cve-header">
                              <span 
                                className="cve-id clickable"
                                onClick={() => getCveDetails(cve.cve_id)}
                              >
                                {cve.cve_id}
                              </span>
                              <span className={`cvss-score ${getSeverityClass(cve.severity)}`}>
                                CVSS: {cve.cvss_score}
                              </span>
                              {cve.exploit_available && (
                                <span className="exploit-badge">⚠️ Exploit Available</span>
                              )}
                            </div>
                            <div className="cve-description">
                              {cve.description.substring(0, 200)}...
                            </div>
                          </div>
                        ))}
                      </div>

                      {vuln.recommendations.length > 0 && (
                        <div className="recommendations">
                          <strong>🛡️ Recommendations:</strong>
                          <ul>
                            {vuln.recommendations.map((rec, recIndex) => (
                              <li key={recIndex}>{rec}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      )}

      {/* CVE Search Tab */}
      {activeTab === 'cve-search' && (
        <div className="cve-search-content">
          <div className="search-controls">
            <h3>🔍 CVE Database Search</h3>
            <div className="search-form">
              <div className="form-group">
                <label>Service Name:</label>
                <input
                  type="text"
                  value={cveSearch.service_name}
                  onChange={(e) => setCveSearch(prev => ({ ...prev, service_name: e.target.value }))}
                  placeholder="e.g., apache, nginx, mysql"
                />
              </div>
              <div className="form-group">
                <label>Version (optional):</label>
                <input
                  type="text"
                  value={cveSearch.version}
                  onChange={(e) => setCveSearch(prev => ({ ...prev, version: e.target.value }))}
                  placeholder="e.g., 2.4.41"
                />
              </div>
              <div className="form-group">
                <label>Severity Filter:</label>
                <select 
                  value={cveSearch.severity_filter}
                  onChange={(e) => setCveSearch(prev => ({ ...prev, severity_filter: e.target.value }))}
                >
                  <option value="">All Severities</option>
                  <option value="CRITICAL">Critical</option>
                  <option value="HIGH">High</option>
                  <option value="MEDIUM">Medium</option>
                  <option value="LOW">Low</option>
                </select>
              </div>
              <button 
                onClick={searchCveDatabase}
                disabled={loading || !cveSearch.service_name.trim()}
                className="search-btn"
              >
                {loading ? '🔄 Searching...' : '🔍 Search CVEs'}
              </button>
            </div>
          </div>

          {cveResults.length > 0 && (
            <div className="cve-results">
              <h3>📋 Search Results ({cveResults.length} CVEs)</h3>
              <div className="cve-list">
                {cveResults.map((cve, index) => (
                  <div key={index} className="cve-result-item">
                    <div className="cve-result-header">
                      <span 
                        className="cve-id clickable"
                        onClick={() => getCveDetails(cve.cve_id)}
                      >
                        {cve.cve_id}
                      </span>
                      <span className={`cvss-score ${getSeverityClass(cve.severity)}`}>
                        {cve.cvss_score}
                      </span>
                      <span className={`severity ${getSeverityClass(cve.severity)}`}>
                        {cve.severity}
                      </span>
                      {cve.exploit_available && (
                        <span className="exploit-badge">⚠️ Exploit</span>
                      )}
                    </div>
                    <div className="cve-description">
                      {cve.description}
                    </div>
                    <div className="cve-date">
                      Published: {formatDate(cve.published_date)}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Database Tab */}
      {activeTab === 'database' && (
        <div className="database-content">
          <div className="database-controls">
            <h3>🗃️ CVE Database Management</h3>
            <button 
              onClick={updateCveDatabase}
              disabled={loading}
              className="update-btn"
            >
              {loading ? '🔄 Updating...' : '🔄 Update Database'}
            </button>
          </div>

          {databaseStats && (
            <div className="database-stats">
              <h3>📊 Database Statistics</h3>
              <div className="stats-grid">
                <div className="stat-card">
                  <div className="stat-value">{databaseStats.cve_database.total_cves}</div>
                  <div className="stat-label">Total CVEs</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">{databaseStats.cve_database.cves_with_exploits}</div>
                  <div className="stat-label">With Exploits</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">{databaseStats.scan_history.total_scans}</div>
                  <div className="stat-label">Total Scans</div>
                </div>
              </div>

              <div className="severity-breakdown">
                <h4>Severity Breakdown</h4>
                <div className="severity-stats">
                  {Object.entries(databaseStats.cve_database.severity_breakdown).map(([severity, count]) => (
                    <div key={severity} className={`severity-stat ${getSeverityClass(severity)}`}>
                      <span className="severity-name">{severity}</span>
                      <span className="severity-count">{count}</span>
                    </div>
                  ))}
                </div>
              </div>

              {databaseStats.cve_database.latest_cve.cve_id && (
                <div className="latest-cve">
                  <h4>Latest CVE</h4>
                  <p>
                    <strong>{databaseStats.cve_database.latest_cve.cve_id}</strong> - 
                    Published: {formatDate(databaseStats.cve_database.latest_cve.published_date)}
                  </p>
                </div>
              )}
            </div>
          )}
        </div>
      )}

      {/* CVE Details Modal */}
      {selectedCve && (
        <div className="modal-overlay" onClick={() => setSelectedCve(null)}>
          <div className="cve-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>{selectedCve.cve_id} Details</h3>
              <button 
                onClick={() => setSelectedCve(null)}
                className="modal-close-btn"
              >
                ×
              </button>
            </div>
            <div className="modal-content">
              <div className="cve-details">
                <div className="detail-row">
                  <span className="label">CVSS Score:</span>
                  <span className={`value ${getSeverityClass(selectedCve.severity)}`}>
                    {selectedCve.cvss_score} ({selectedCve.severity})
                  </span>
                </div>
                <div className="detail-row">
                  <span className="label">Published:</span>
                  <span className="value">{formatDate(selectedCve.published_date)}</span>
                </div>
                <div className="detail-row">
                  <span className="label">Modified:</span>
                  <span className="value">{formatDate(selectedCve.modified_date)}</span>
                </div>
                <div className="detail-row">
                  <span className="label">CVSS Vector:</span>
                  <span className="value">{selectedCve.cvss_vector}</span>
                </div>
                
                <div className="detail-section">
                  <h4>Description</h4>
                  <p>{selectedCve.description}</p>
                </div>

                {selectedCve.exploits && selectedCve.exploits.length > 0 && (
                  <div className="detail-section">
                    <h4>⚠️ Available Exploits ({selectedCve.exploits.length})</h4>
                    {selectedCve.exploits.map((exploit, index) => (
                      <div key={index} className="exploit-info">
                        <strong>{exploit.title}</strong>
                        <p>{exploit.description}</p>
                        <div className="exploit-meta">
                          <span>Platform: {exploit.platform}</span>
                          <span>Type: {exploit.exploit_type}</span>
                          {exploit.verified && <span className="verified">✅ Verified</span>}
                        </div>
                      </div>
                    ))}
                  </div>
                )}

                {selectedCve.references && selectedCve.references.length > 0 && (
                  <div className="detail-section">
                    <h4>References</h4>
                    <ul className="references-list">
                      {selectedCve.references.map((ref, index) => (
                        <li key={index}>
                          <a href={ref} target="_blank" rel="noopener noreferrer">
                            {ref}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {selectedCve.cpe_configurations && selectedCve.cpe_configurations.length > 0 && (
                  <div className="detail-section">
                    <h4>Affected Configurations</h4>
                    <ul className="cpe-list">
                      {selectedCve.cpe_configurations.map((cpe, index) => (
                        <li key={index} className="cpe-item">{cpe}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityScanner;